{"version":3,"sources":["license.js","App.js","serviceWorker.js","index.js"],"names":["serialNbr","enterLicenseCode","className","id","type","placeholder","onClick","glk","LicensePage","style","width","height","borderWidth","src","alt","this","props","message","React","Component","a","ReactDOM","render","document","getElementById","did","d","appId","getLicenseRequest","method","crossDomain","url","data","dataType","headers","Authorization","axios","catch","err","errorMessage","response","status","originalTrace","console","log","licStatus","getLicense","ilk","alert","lr","xml","undefined","formData","FormData","blob","Blob","append","uploadKeyRequest","appName","uploadKey","includes","restartAcap","ValidateLicense","getSerialNbr","listRequest","list","XMLParser","require","xmlDoc","parseFromString","installedApps","getElementsByTagName","length","i","licenseStatus","attributes","License","Name","startACAP","serialNumberRequest","split","replace","trim","restartRequest","toLowerCase","acapName","styleLink","createElement","httpRequest","httpGet","appstatus","Status","window","location","startACAPRequest","then","rel","href","head","appendChild","App","Boolean","hostname","match","StrictMode","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"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","file":"static/js/main.b598e911.chunk.js","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport axios from 'axios'\r\nimport {did,appName,appId,startACAP} from './App'\r\n\r\nvar serialNbr = \"\";\r\n\r\nvar enterLicenseCode = (\r\n                        <div>                                     \r\n                            <div className='input-group mb-3' id=\"licenseCodeRef\">\r\n                                <div className='input-group-prepend'><br/>\r\n                                    <span className='input-group-text' id=''>License Code</span><br/>\r\n                                </div>\r\n                                <input type=\"text\" placeholder=\"Enter License Code\" className=\"form-control\" id=\"licenseCode\" />\r\n                            </div>                                                                       \r\n                            <br/>\r\n                            <button type=\"button\" id=\"getLicenseButton\" className=\"btn btn-primary\" onClick={glk}>\r\n                                Get License\r\n                            </button>                          \r\n                        </div>\r\n);\r\n\r\nvar freeLicenseCode = (\r\n                        <div></div>\r\n);\r\n\r\nclass LicensePage extends React.Component{    \r\n    render(){            \r\n      return(\r\n        <div className=\"App\">\r\n          <header className=\"App-header\">\r\n          <div className=\"lic\">\r\n            <div className=\"licArea\">\r\n                  <div style={{width:\"100vh\",height:\"100vh\",borderWidth:\"0px\"}}>     \r\n                    <div className=\"center\">\r\n                        <img src=\"./img/axis.svg\" height=\"100\" alt=\"\"/><br/>                        \r\n                        <div id=\"license\">\r\n                            <br/>                             \r\n                            <p>{this.props.message}</p>\r\n                            {/*{this.props.licStatus}*/}\r\n                        </div>                                                            \r\n                    </div>\r\n                  </div>\r\n            </div>\r\n          </div>\r\n          </header>\r\n        </div>\r\n      )\r\n    }\r\n  }\r\n\r\n//request license to axis site\r\nasync function glk(){  \r\n    //licStatus = \"Retrieving license key. Please wait ...\";    \r\n    //render License Page\r\n    ReactDOM.render(<LicensePage message=\"Retrieving license key. Please wait ...\" />,document.getElementById('root')); \r\n\r\n    //var lcode = document.getElementById(\"licenseCode\").value; \r\n    //console.log(\"license code : \" + lcode);\r\n    //payload\r\n    //var d = \"{\\\"licenseCode\\\":\\\"\"+lcode+\"\\\",\\\"deviceId\\\":\\\"\"+serialNbr+\"\\\"}\";\r\n    if(did===\"free\"){\r\n        var d = \"{\\\"applicationId\\\":\\\"\"+appId+\"\\\",\\\"deviceId\\\":\\\"\"+serialNbr+\"\\\",\\\"licenseType\\\":1}\"\r\n    }   \r\n    //build http get request\r\n    var getLicenseRequest = {\r\n        method: \"POST\",\r\n        crossDomain: true,\r\n        url: \"https://gateway.api.axis.com/info-ext/acap/aca/v2/licensekey\",\r\n        data: d,\r\n        dataType: \"json\",        \r\n        headers: {\r\n            Authorization: \"Bearer 2f742d39-1251-30bc-ba38-bc460e820596\",\r\n            'Content-Type': 'application/json'           \r\n        },\r\n    }\r\n    //send request\r\n    var getLicense = await axios(getLicenseRequest)\r\n    //error handling\r\n    .catch(err => {\r\n        //console.log(err.response);\r\n        var errorMessage = \"Error! Code: \" + err.response.status + \" Message: \" + err.response.data.originalTrace;\r\n        console.log(errorMessage);        \r\n        ReactDOM.render(<LicensePage message={errorMessage} licStatus={enterLicenseCode}/>,document.getElementById('root')); \r\n    })\r\n    \r\n    //debug\r\n    console.log(getLicense.status);\r\n    console.log(getLicense.data);\r\n    if (getLicense.status===200){        \r\n        //console.log(\"200OK!\");\r\n        ilk(getLicense.data);\r\n    }else{              \r\n        alert(\"Error receiving license key, install through Axis Device Management or the ACAP List page\");\r\n    }    \r\n}\r\n\r\n//upload license into camera\r\nasync function ilk(lr){      \r\n    //render License Page\r\n    ReactDOM.render(<LicensePage message=\"Installing license key. Please wait ...\" licStatus={enterLicenseCode}/>,document.getElementById('root'));\r\n\r\n    console.log(\"LR = \"+lr.xml);\r\n    if(lr.xml !== undefined){        \r\n        var formData = new FormData();\r\n        var blob = new Blob([lr.xml], {type: \"application/octet-stream\"});\r\n        formData.append(\"lic_data\",blob,\"key.lic\");\r\n        var uploadKeyRequest = {\r\n            method: \"POST\",\r\n            url: \"/axis-cgi/applications/license.cgi?action=uploadlicensekey&package=\" + appName,\r\n            data: formData            \r\n        };\r\n\r\n        var uploadKey = await axios(uploadKeyRequest);\r\n        console.log(\"Response: \" + uploadKey.status);\r\n        if (uploadKey.data.includes(\"OK\")){\r\n            console.log(\"License key installed\");\r\n            //start acap\r\n            restartAcap();            \r\n            //check license again and redirect if Valid\r\n            ValidateLicense();\r\n        }else{\r\n            if (uploadKey.data.includes(\"21\")){\r\n                console.log(\"Error: Invalid license key file.\");\r\n                alert(\"Error: Invalid license key file.\");\r\n            }\r\n            if (uploadKey.data.includes(\"22\")){\r\n                console.log(\"Error: File upload failed.\");\r\n                alert(\"Error: File upload failed.\");\r\n            }\r\n            if (uploadKey.data.includes(\"23\")){\r\n                console.log(\"Error: Failed to remove the license key file.\");\r\n                alert(\"Error: Failed to remove the license key file.\");\r\n            }\r\n            if (uploadKey.data.includes(\"24\")){\r\n                console.log(\"Error: The application is not correctly installed\");\r\n                alert(\"Error: The application is not correctly installed\");\r\n            }\r\n            if (uploadKey.data.includes(\"25\")){\r\n                console.log(\"Error: The key’s application ID does not match the installed application.\");\r\n                alert(\"Error: The key’s application ID does not match the installed application.\");\r\n            }\r\n            if (uploadKey.data.includes(\"26\")){\r\n                console.log(\"Error: The license key cannot be used with this version of the application.\");\r\n                alert(\"Error: The license key cannot be used with this version of the application.\");\r\n            }\r\n            if (uploadKey.data.includes(\"27\")){\r\n                console.log(\"Error: Failed to connect to Axis online service.\");\r\n                alert(\"Error: Failed to connect to Axis online service.\");\r\n            }\r\n            if (uploadKey.data.includes(\"28\")){\r\n                console.log(\"Error: Failed to receive license from Axis online service.\");\r\n                alert(\"Error: Failed to receive license from Axis online service.\");\r\n            }\r\n            if (uploadKey.data.includes(\"29\")){\r\n                console.log(\"Error: Bad configuration file for the application.\");\r\n                alert(\"Error: Bad configuration file for the application.\");\r\n            }\r\n            if (uploadKey.data.includes(\"30\")){\r\n                console.log(\"Error: Wrong serial number.\");\r\n                alert(\"Error: Wrong serial number.\");\r\n            }\r\n            if (uploadKey.data.includes(\"31\")){\r\n                console.log(\"Error: The license key has expired.\");\r\n                alert(\"Error: The license key has expired.\");\r\n            }\r\n        }\r\n    }else {\r\n        //All kinds of errors.\r\n        console.log(\"Error receiving license key, install through Axis Device Management or the ACAP List page\");\r\n        alert(\"Error receiving license key, install through Axis Device Management or the ACAP List page\");\r\n    }\r\n\r\n}\r\n\r\n//Validate license key (this is done first at startup)\r\nexport async function ValidateLicense(){\r\n    //get serial number\r\n    getSerialNbr();\r\n   \r\n    var listRequest = {\r\n        method: \"GET\",\r\n        url: \"/axis-cgi/applications/list.cgi\"       \r\n    }\r\n\r\n    var list = await axios(listRequest);\r\n    //debug\r\n    console.log(list.data);\r\n    var XMLParser = require('react-xml-parser');\r\n    var xmlDoc = new XMLParser().parseFromString(list.data);\r\n    //debug\r\n    console.log(xmlDoc);\r\n    //find number of installed apps\r\n    var installedApps = xmlDoc.getElementsByTagName(\"application\").length;\r\n    //debug\r\n    console.log(\"Installed Apps: \" + installedApps);\r\n    //scan through them and look for our app\r\n    var i =0;\r\n    for (i = 0; i < installedApps; i++){\r\n        var licenseStatus = xmlDoc.getElementsByTagName(\"application\")[i].attributes.License;\r\n        if ((xmlDoc.getElementsByTagName(\"application\")[i].attributes.Name) === appName){\r\n            if (licenseStatus === 'Missing'){                 \r\n                console.log(\"Missing license.\");\r\n                if (did === 'free'){                    \r\n                    //install the license\r\n                    glk();\r\n                }\r\n                //render License Page\r\n                ReactDOM.render(<LicensePage message=\"A license key needs to be installed.\" licStatus={enterLicenseCode}/>,document.getElementById('root'));                \r\n            }\r\n            if (licenseStatus === 'Valid'){\r\n                console.log(\"Valid license.\");\r\n                //This is the function to call if the license is Valid. This resides in the app.js file\r\n                startACAP();                 \r\n                //render License Page            \r\n                ReactDOM.render(<LicensePage message=\"Loading ...\"/>,document.getElementById('root'));\r\n            }\r\n            if (licenseStatus === 'Invalid'){                \r\n                console.log(\"Invalid license.\");\r\n                //render License Page            \r\n                ReactDOM.render(<LicensePage message=\"Invalid license.\" licStatus={enterLicenseCode}/>,document.getElementById('root'));\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nasync function getSerialNbr(){   \r\n    var serialNumberRequest = {\r\n        method: \"GET\",\r\n        url: \"/axis-cgi/param.cgi?action=list&group=Properties.System.SerialNumber\"\r\n    }\r\n    var response = await axios(serialNumberRequest);\r\n    serialNbr = response.data.split(\"=\")[1].replace(\"\\n\",\"\").trim();\r\n    console.log(\"serial number: \" + serialNbr);\r\n}\r\n\r\nasync function restartAcap() {\r\n    var restartRequest = {\r\n        method: \"GET\",\r\n        url: \"/axis-cgi/applications/control.cgi?action=restart&package=\" + appName.toLowerCase()\r\n    }\r\n\r\n    var restart = await axios(restartRequest);\r\n}\r\n\r\n\r\n//export default glk;\r\n","import React, { useCallback }  from 'react';\n\nimport './App.css';\n//Bootstrap\nimport './css/bootstrap.min.css'\nimport './css/style.css'\nimport axios from 'axios'\n\n/*********************************************/\n//LICENSE\nimport {ValidateLicense} from './license';\nexport var did = \"free\";\nexport var appName = \"tailscale_vpn\";\nexport var appId = \"414812\";\n/*********************************************/\n//Template\nexport var acapName = \"Tailscale VPN\";\nconst styleLink = document.createElement(\"link\");\nstyleLink.rel = \"stylesheet\";\nstyleLink.href = \"./css/semantic.min.css\";\ndocument.head.appendChild(styleLink);\n/*********************************************/\n\nfunction App() {\n  //check license\n  ValidateLicense();\n  \n  return (    \n    <div> \n    </div>\n  );\n}\n\n\n\nexport async function startACAP(){\n  \n  console.log(\"In startACAP\");\n  var httpRequest = {\n    method: \"GET\",\n    url: \"/axis-cgi/applications/list.cgi\"\n  }\n  var httpGet = await axios(httpRequest);\n  //console.log(httpGet.status);\n  console.log(httpGet.data);\n  var XMLParser = require('react-xml-parser');\n  var xmlDoc = new XMLParser().parseFromString(httpGet.data);\n  console.log(xmlDoc);\n  var installedApps = xmlDoc.getElementsByTagName(\"application\").length;\n  console.log(\"Installed Apps: \" + installedApps);\n  var i =0;\n  for (i = 0; i < installedApps; i++){\n    var appstatus = xmlDoc.getElementsByTagName(\"application\")[i].attributes.Status;\n    //console.log(\"app number \"+i+\"Status \"+appstatus);\n    /* look for tailscale_vpn app */\n    if ((xmlDoc.getElementsByTagName(\"application\")[i].attributes.Name) === appName){\t\n      /* check if tailscale_vpn is running */\n      if (appstatus === 'Running'){\n        console.log(acapName + \" is running\");  \n        //load logs.html page\n        window.location=\"/local/tailscale_vpn/logs.html\";\n      }else{\n        console.log(acapName + \" is NOT running\");\n        console.log(acapName + \" is Starting\");\n        var startACAPRequest = {\n          method: \"GET\",\n          url: \"/axis-cgi/applications/control.cgi?action=start&package=\" + appName\n        }\n        var startACAP = await axios(startACAPRequest)\n          .then((response) => {\n            console.log(response);\n            console.log(\"Response from tailscale_vpn acap: \" + response.data);\n            //load logs.html page\n            window.location=\"/local/tailscale_vpn/logs.html\";\n          })    \n        \n      }\n    }\n  }  \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}